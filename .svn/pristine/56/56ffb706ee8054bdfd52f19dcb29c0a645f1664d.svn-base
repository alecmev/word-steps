using System.ComponentModel;
using System.Data.Linq.Mapping;
using System.Data.Linq;
using System.Windows.Data;
using System;
using System.Globalization;
using System.Windows;

namespace WordSteps
{
    [Table(Name = "Languages")]
    public class Language
        : INotifyPropertyChanged, INotifyPropertyChanging
    {
        private string _Code;
        private string _Name;
        private EntitySet<Dictionary> _OriginalDictionaries;
        private EntitySet<Dictionary> _TranslationDictionaries;

        [Column(IsPrimaryKey = true, IsDbGenerated = true, AutoSync = AutoSync.OnInsert)]
        public int Id
        {
            get;
            set;
        }

        [Column(Storage = "_Code")]
        public string Code
        {
            get { return _Code; }
            set
            {
                if (_Code != value)
                {
                    NotifyPropertyChanging("Code");
                    _Code = value;
                    NotifyPropertyChanged("Code");
                }
            }
        }

        [Column(Storage = "_Name")]
        public string Name
        {
            get { return _Name; }
            set
            {
                if (_Name != value)
                {
                    NotifyPropertyChanging("Name");
                    _Name = value;
                    NotifyPropertyChanged("Name");
                }
            }
        }

        [Association(Storage = "_OriginalDictionaries", ThisKey = "Id", OtherKey = "OriginalLanguageId")]
        public EntitySet<Dictionary> OriginalDictionaries
        {
            get { return _OriginalDictionaries; }
        }

        [Association(Storage = "_TranslationDictionaries", ThisKey = "Id", OtherKey = "TranslationLanguageId")]
        public EntitySet<Dictionary> TranslationDictionaries
        {
            get { return _TranslationDictionaries; }
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;

        public Language()
        {
            _OriginalDictionaries = new EntitySet<Dictionary>(OnOriginalDictionaryAdded, OnOriginalDictionaryRemoved);
            _OriginalDictionaries.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(OnOriginalDictionariesChanged);

            _TranslationDictionaries = new EntitySet<Dictionary>(OnTranslationDictionaryAdded, OnTranslationDictionaryRemoved);
            _TranslationDictionaries.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(OnTranslationDictionariesChanged);
        }

        private void OnOriginalDictionaryAdded(Dictionary dictionary)
        {
            dictionary.OriginalLanguage = this;
        }
        private void OnOriginalDictionaryRemoved(Dictionary dictionary)
        {
            dictionary.OriginalLanguage = null;
        }
        private void OnOriginalDictionariesChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            NotifyPropertyChanged("OriginalDictionaries");
        }

        private void OnTranslationDictionaryAdded(Dictionary dictionary)
        {
            dictionary.TranslationLanguage = this;
        }
        private void OnTranslationDictionaryRemoved(Dictionary dictionary)
        {
            dictionary.TranslationLanguage = null;
        }
        private void OnTranslationDictionariesChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            NotifyPropertyChanged("TranslationDictionaries");
        }

        private void NotifyPropertyChanging(string propertyName)
        {
            if (PropertyChanging != null)
            {
                PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
        private void NotifyPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public class LanguageListPickerConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return App.DataBaseViewModel.Languages.IndexOf((Language)value);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return App.DataBaseViewModel.Languages[(int)value];
        }
    }
}